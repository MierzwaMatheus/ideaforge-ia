---
description: Quando precisar mexer em qualquer coisa do realtime database do firebase
globs: 
alwaysApply: false
---
# Estrutura de Dados Atualizada - Firebase Realtime Database

Este documento define a estrutura de dados atualizada para o Firebase Realtime Database do IdeaForge, adaptada para suportar o foco em empreendedores e criativos, com múltiplos tipos de projetos e documentos acionáveis.

## Formato do Realtime Database (JSON)

```json
{
  "rules": {
    ".read": "auth != null",
    ".write": "auth != null",
    "users": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "profile": {
          ".validate": "newData.hasChildren(['email', 'createdAt']) && newData.child('email').isString() && newData.child('createdAt').isNumber()",
          "email": { ".validate": "newData.isString()" },
          "displayName": { ".validate": "newData.isString()" },
          "photoURL": { ".validate": "newData.isString()" },
          "createdAt": { ".validate": "newData.isNumber()" }
        },
        "apiKey": {
          // Idealmente, a chave não seria armazenada aqui por segurança.
          // Se for, deve ser criptografada ou armazenada com regras muito restritas.
          ".validate": "newData.isString() && newData.val().length > 10"
        },
        "preferences": {
          // Preferências do usuário expandidas para o novo contexto
          "theme": { ".validate": "newData.isString() && (newData.val() === 'dark' || newData.val() === 'light')" },
          "sector": { ".validate": "newData.isString()" }, // Setor principal do usuário
          "defaultExportFormat": { ".validate": "newData.isString() && (newData.val() === 'pdf' || newData.val() === 'docx' || newData.val() === 'html')" },
          "autoGenerateDocuments": { ".validate": "newData.isBoolean()" },
          "logo": { ".validate": "newData.isString()" } // URL do logo para incluir em documentos
        }
      }
    },
    "projects": {
      "$uid": {
        // Usuário só pode ler/escrever seus próprios projetos
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "$projectId": {
          ".validate": "newData.hasChildren(['details', 'onboardingData', 'createdAt', 'status'])",
          "details": {
            ".validate": "newData.hasChildren(['name', 'type'])",
            "name": { ".validate": "newData.isString() && newData.val().length > 0" },
            "description": { ".validate": "newData.isString()" },
            "type": { ".validate": "newData.isString()" }, // Expandido: 'app', 'physical_product', 'service', 'ecommerce', 'content', 'other'
            "sector": { ".validate": "newData.isString()" }, // Ex: 'technology', 'health', 'education', 'food', 'fashion'
            "targetAudience": { ".validate": "newData.isString()" },
            "marketSize": { ".validate": "newData.isString()" } // Ex: 'local', 'regional', 'national', 'international'
          },
          "onboardingData": {
            // Estrutura expandida para dados do onboarding
            "resources": {
              // Recursos que o usuário já possui
              "team": { ".validate": "newData.isBoolean()" },
              "initialCapital": { ".validate": "newData.isBoolean()" },
              "technicalKnowledge": { ".validate": "newData.isBoolean()" },
              "network": { ".validate": "newData.isBoolean()" }
            },
            "budget": { ".validate": "newData.isString()" }, // Faixa de orçamento inicial
            "desiredDocuments": {
              // Documentos que o usuário deseja gerar
              "pitchDeck": { ".validate": "newData.isBoolean()" },
              "businessCanvas": { ".validate": "newData.isBoolean()" },
              "landingPage": { ".validate": "newData.isBoolean()" },
              "marketingPlan": { ".validate": "newData.isBoolean()" },
              "viabilityAnalysis": { ".validate": "newData.isBoolean()" }
            },
            // Outros dados específicos do tipo de projeto
            "customFields": { ".validate": "newData.isObject()" }
          },
          "createdAt": { ".validate": "newData.isNumber()" },
          "updatedAt": { ".validate": "newData.isNumber()" },
          "status": { ".validate": "newData.isString()" } // Ex: 'active', 'archived', 'completed'
        }
      },
      // Índice para permitir buscar projetos por UID
      ".indexOn": ["$uid"]
    },
    "chats": {
      "$projectId": {
        // Permite leitura/escrita se o usuário for dono do projeto
        ".read": "root.child('projects').child(auth.uid).child($projectId).exists()",
        ".write": "root.child('projects').child(auth.uid).child($projectId).exists()",
        "$agentId": { // Ex: 'valida_ia', 'strategos_ai', etc.
          "messages": {
            "$messageId": {
              ".validate": "newData.hasChildren(['sender', 'content', 'timestamp', 'userId']) && newData.child('timestamp').isNumber()",
              "sender": { ".validate": "newData.isString() && (newData.val() === 'user' || newData.val() === $agentId)" },
              "content": { ".validate": "newData.isString() && newData.val().length > 0" },
              "timestamp": { ".validate": "newData.isNumber()" },
              "userId": { ".validate": "newData.isString() && newData.val() === auth.uid" }, // Garante que a mensagem do usuário é do usuário logado
              "documentRequest": { ".validate": "newData.isString() || newData.val() === null" } // Opcional: Se a mensagem solicita um documento específico
            }
          }
        }
      }
    },
    "documents": {
      "$projectId": {
        // Permite leitura/escrita se o usuário for dono do projeto
        ".read": "root.child('projects').child(auth.uid).child($projectId).exists()",
        ".write": "root.child('projects').child(auth.uid).child($projectId).exists()",
        "$documentId": {
          ".validate": "newData.hasChildren(['type', 'content', 'createdAt', 'userId'])",
          "type": { ".validate": "newData.isString() && (newData.val() === 'pitch_deck' || newData.val() === 'business_canvas' || newData.val() === 'landing_page' || newData.val() === 'marketing_plan' || newData.val() === 'viability_analysis')" },
          "title": { ".validate": "newData.isString()" },
          "content": { ".validate": "newData.isString() && newData.val().length > 0" }, // Conteúdo HTML do documento
          "createdAt": { ".validate": "newData.isNumber()" },
          "updatedAt": { ".validate": "newData.isNumber()" },
          "userId": { ".validate": "newData.isString() && newData.val() === auth.uid" }, // Garante que o documento é do usuário logado
          "version": { ".validate": "newData.isNumber()" }, // Para controle de versões
          "metadata": {
            // Metadados específicos do documento
            "exportFormats": {
              // Formatos em que o documento foi exportado
              "pdf": { ".validate": "newData.isBoolean()" },
              "docx": { ".validate": "newData.isBoolean()" },
              "html": { ".validate": "newData.isBoolean()" },
              "image": { ".validate": "newData.isBoolean()" }
            },
            "customFields": { ".validate": "newData.isObject()" }
          }
        }
      }
    },
    // Espaço para futuras estruturas globais
    "templates": {
      // Templates para diferentes tipos de documentos e setores
      ".read": true, // Templates podem ser públicos
      "$templateId": {
        "type": { ".validate": "newData.isString()" }, // Tipo de documento
        "sector": { ".validate": "newData.isString()" }, // Setor relacionado
        "content": { ".validate": "newData.isString()" }, // Conteúdo base do template
        "metadata": { ".validate": "newData.isObject()" }
      }
    },
    "sectors": {
      // Informações sobre diferentes setores
      ".read": true, // Informações de setores podem ser públicas
      "$sectorId": {
        "name": { ".validate": "newData.isString()" },
        "description": { ".validate": "newData.isString()" },
        "keywords": { ".validate": "newData.isArray()" }
      }
    }
  }
}
```

## Principais Atualizações na Estrutura

1. **Expansão dos Tipos de Projeto**
   - Campo `type` em `projects/$uid/$projectId/details` agora suporta diversos tipos: 'app', 'physical_product', 'service', 'ecommerce', 'content', 'other'
   - Adição de campos `sector` e `marketSize` para melhor categorização

2. **Dados de Onboarding Expandidos**
   - Seção `resources` para rastrear recursos que o empreendedor já possui
   - Campo `budget` para registrar o orçamento inicial estimado
   - Seção `desiredDocuments` para rastrear quais documentos acionáveis o usuário deseja gerar
   - Campo `customFields` para flexibilidade adicional baseada no tipo de projeto

3. **Nova Estrutura para Documentos**
   - Nó principal `documents/$projectId/$documentId` para armazenar todos os documentos acionáveis
   - Suporte para múltiplos tipos de documentos: 'pitch_deck', 'business_canvas', 'landing_page', 'marketing_plan', 'viability_analysis'
   - Metadados para rastrear formatos de exportação e versões
   - Conteúdo HTML completo armazenado para cada documento

4. **Preferências de Usuário Expandidas**
   - Campo `sector` para o setor principal de interesse do usuário
   - Campo `defaultExportFormat` para formato de exportação preferido
   - Campo `autoGenerateDocuments` para controlar geração automática de documentos
   - Campo `logo` para armazenar URL do logo para inclusão em documentos

5. **Estruturas Adicionais para Escalabilidade**
   - Nó `templates` para armazenar templates de documentos por tipo e setor
   - Nó `sectors` para informações sobre diferentes setores de negócio

6. **Melhorias nas Mensagens de Chat**
   - Campo `documentRequest` opcional para rastrear quando uma mensagem solicita a geração de um documento específico

## Considerações de Segurança e Performance

1. **Regras de Segurança**
   - Mantidas as regras de acesso baseadas em `auth.uid` para garantir que usuários só acessem seus próprios dados
   - Validações de tipo e estrutura para garantir integridade dos dados

2. **Indexação**
   - Índice em `projects` para busca eficiente por UID
   - Considerar adicionar índices adicionais conforme o uso da aplicação evolui:
     - Índice por `type` em projetos para filtrar por tipo
     - Índice por `createdAt` em documentos para ordenação cronológica

3. **Escalabilidade**
   - Estrutura projetada para suportar múltiplos projetos por usuário
   - Múltiplos documentos por projeto
   - Múltiplas versões de documentos (através do campo `version`)

Esta estrutura de dados atualizada fornece a base necessária para suportar o novo foco do IdeaForge em empreendedores e criativos, permitindo o armazenamento e gerenciamento eficiente de diversos tipos de projetos e documentos acionáveis.
